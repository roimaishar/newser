name: Israeli News Aggregator

on:
  schedule:
    # Run every hour during business hours Israel time (UTC+3)
    # Business hours: 6 AM - 11 PM Israel time = 3 AM - 8 PM UTC
    - cron: '0 3-20 * * *'
  workflow_dispatch:
    inputs:
      hours:
        description: 'Hours to look back for articles'
        required: false
        default: '1'
        type: string
      updates_only:
        description: 'Show only new/updated items'
        required: false
        default: false
        type: boolean
      send_to_slack:
        description: 'Send to Slack'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PYTHONPATH: ./src

jobs:
  aggregate-news:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('requirements.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv pip install --system -r requirements.lock
    
    - name: Debug secrets presence (masked)
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        set +e
        echo "SUPABASE_URL set: $([ -n \"$SUPABASE_URL\" ] && echo yes || echo no)"
        echo "SUPABASE_DB_PASSWORD set: $([ -n \"$SUPABASE_DB_PASSWORD\" ] && echo yes || echo no)"
        echo "SUPABASE_ANON_KEY set: $([ -n \"$SUPABASE_ANON_KEY\" ] && echo yes || echo no), length=${#SUPABASE_ANON_KEY}"
        echo "SUPABASE_SERVICE_KEY set: $([ -n \"$SUPABASE_SERVICE_KEY\" ] && echo yes || echo no), length=${#SUPABASE_SERVICE_KEY}"
        echo "OPENAI_API_KEY set: $([ -n \"$OPENAI_API_KEY\" ] && echo yes || echo no)"
        echo "SLACK_WEBHOOK_URL set: $([ -n \"$SLACK_WEBHOOK_URL\" ] && echo yes || echo no)"
    
    - name: Database health check
      id: health-check
      continue-on-error: true
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        python -c "from src.core.database import get_database; db = get_database(); print(db.health_check())"
    
    - name: Run Hebrew news analysis
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # Set parameters based on trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          HOURS="${{ github.event.inputs.hours }}"
          UPDATES_FLAG=""
          if [ "${{ github.event.inputs.updates_only }}" = "true" ]; then
            UPDATES_FLAG="--updates-only"
          fi
        else
          HOURS="1"  # For scheduled runs, check last hour
          UPDATES_FLAG="--updates-only"
        fi
        
        echo "Running: python run.py news analyze --hours $HOURS $UPDATES_FLAG"
        python run.py news analyze --hours $HOURS $UPDATES_FLAG
    
    - name: Cleanup old database records
      if: success()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        python -c "from src.core.database import get_database; db = get_database(); deleted = db.cleanup_old_records(); print(f'Cleaned up {deleted} old records')"
    
    - name: Send error alert to Slack on failure
      if: failure() && env.SLACK_WEBHOOK_URL
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"ðŸš¨ Israeli News Aggregator workflow failed!\\n\\nWorkflow: $GITHUB_WORKFLOW\\nRun: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\",\"username\":\"GitHub Actions\",\"icon_emoji\":\":warning:\"}" \
          "$SLACK_WEBHOOK_URL"