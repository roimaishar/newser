name: Israeli News Aggregator

on:
  schedule:
    # Run every 30 minutes during business hours Israel time (UTC+3)
    # Business hours: 6 AM - 11 PM Israel time = 3 AM - 8 PM UTC
    - cron: '*/30 3-20 * * *'
  workflow_dispatch:
    inputs:
      hours:
        description: 'Hours to look back for articles'
        required: false
        default: '1'
        type: string
      updates_only:
        description: 'Show only new/updated items'
        required: false
        default: false
        type: boolean
      send_to_slack:
        description: 'Send to Slack'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PYTHONPATH: ./src

jobs:
  aggregate-news:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Database health check
      id: health-check
      continue-on-error: true
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        python -c "from src.core.database import get_database; db = get_database(); print(db.health_check())"
    
    - name: Run Hebrew news analysis
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # Set parameters based on trigger
        HOURS="${{ github.event.inputs.hours || '1' }}"
        
        # Build command with new modular structure
        CMD="python run.py news analyze --hours $HOURS --hebrew"
        
        # Add updates-only mode if requested
        if [[ "${{ github.event.inputs.updates_only || 'false' }}" == "true" ]]; then
          CMD="$CMD --updates-only"
        fi
        
        # Add Slack notification if enabled and webhook is available
        if [[ "${{ github.event.inputs.send_to_slack || 'true' }}" == "true" ]] && [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          CMD="$CMD --slack"
        fi
        
        echo "Running: $CMD"
        $CMD
    
    - name: Cleanup old database records
      if: success()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        python -c "from src.core.database import get_database; db = get_database(); deleted = db.cleanup_old_records(); print(f'Cleaned up {deleted} old records')"
    
    - name: Send error alert to Slack on failure
      if: failure() && env.SLACK_WEBHOOK_URL
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ðŸš¨ Israeli News Aggregator workflow failed!\n\nWorkflow: '"$GITHUB_WORKFLOW"'\nRun: '"$GITHUB_SERVER_URL"'/"$GITHUB_REPOSITORY"'/actions/runs/'"$GITHUB_RUN_ID"'","username":"GitHub Actions","icon_emoji":":warning:"}' \
          $SLACK_WEBHOOK_URL